<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>MarkdownDoc</name></assembly>
<members>
<member name="M:MarkdownDoc.Internal.Common.breakline1(System.Int32,System.String)">
<summary>
 Precondition: source is a single line with only spaces (no tabs/newlines)
</summary>
</member>
<member name="M:MarkdownDoc.Internal.Common.cellSpecifier(System.Int32,MarkdownDoc.Internal.Common.Alignment,System.Char)">
<summary>
 Cell is two characters wider than the specification to allow for left
 and right spacing.
</summary>
</member>
<member name="M:MarkdownDoc.Internal.Common.gridTableRowSep(Microsoft.FSharp.Collections.FSharpList{MarkdownDoc.Internal.Common.ColumnSpec})">
<summary>
 Note the printed column width is two characters wider than the 
 width in the specification. This accounts for left and right spacing 
 when cells are printed.
</summary>
</member>
<member name="M:MarkdownDoc.Internal.Common.raggedTranspose``1(``0,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Collections.FSharpList{``0}})">
<summary>
 F#&apos;s built-in List.transpose needs perfect input. It cannot handle ragged tables.
</summary>
</member>
<member name="T:MarkdownDoc.Internal.FormatCombinators.Doc">
<summary>
 This is not a &quot;pretty printer&quot; as it makes no effort to &quot;fit&quot; the output.
</summary>
</member>
<member name="M:MarkdownDoc.Internal.FormatCombinators.op_AtHatAt(MarkdownDoc.Internal.FormatCombinators.Doc,MarkdownDoc.Internal.FormatCombinators.Doc)">
<summary>
 Vertical concat with a separating blank line 
</summary>
</member>
<member name="M:MarkdownDoc.Internal.FormatCombinators.op_AtAtAt(MarkdownDoc.Internal.FormatCombinators.Doc,MarkdownDoc.Internal.FormatCombinators.Doc)">
<summary>
 Vertical concat
</summary>
</member>
<member name="M:MarkdownDoc.Internal.FormatCombinators.op_PlusHatPlus(MarkdownDoc.Internal.FormatCombinators.Doc,MarkdownDoc.Internal.FormatCombinators.Doc)">
<summary>
 Horizontal concat with a separating space 
</summary>
</member>
<member name="M:MarkdownDoc.Internal.FormatCombinators.op_PlusPlusPlus(MarkdownDoc.Internal.FormatCombinators.Doc,MarkdownDoc.Internal.FormatCombinators.Doc)">
<summary>
 Horizontal concat
</summary>
</member>
<member name="P:MarkdownDoc.Internal.FormatCombinators.space">
<summary>
 A single space
</summary>
</member>
<member name="M:MarkdownDoc.Internal.FormatCombinators.testRender(MarkdownDoc.Internal.FormatCombinators.Doc)">
<summary>
 Print the Doc to the console.
</summary>
</member>
<member name="T:MarkdownDoc.Internal.Tile.Tile">
<summary>
 Maybe a Markdown document is a list of Tiles and tiles don&apos;t 
 themselves naturally concatenate.
</summary>
</member>
<member name="M:MarkdownDoc.Internal.Tile.textGridTable(Microsoft.FSharp.Collections.FSharpList{MarkdownDoc.Internal.Common.ColumnSpec},Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Collections.FSharpList{System.String}}},System.Boolean)">
<summary>
 The first row is optionallty printed as headers.
</summary>
</member>
<member name="M:MarkdownDoc.Internal.Tile.concat(Microsoft.FSharp.Collections.FSharpList{MarkdownDoc.Internal.Tile.Tile})">
<summary>
 A each tile is interspersed with a blank line.
 If the input list is empty, return an empty Tile.
</summary>
</member>
<member name="T:MarkdownDoc.Markdown.RenderContext">
<summary>
 Probably just line width, but opaque anyway...
</summary>
</member>
<member name="M:MarkdownDoc.Markdown.inlineLink(MarkdownDoc.Internal.SimpleText.Text,System.String,Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 [A link](/path/to)

 [A link](/path/to &quot;Title&quot;) 
</summary>
</member>
<member name="M:MarkdownDoc.Markdown.doubleBackticks(MarkdownDoc.Internal.SimpleText.Text)">
<summary>
 Backticks for inline code.
</summary>
</member>
<member name="M:MarkdownDoc.Markdown.backticks(MarkdownDoc.Internal.SimpleText.Text)">
<summary>
 Backticks for inline code.
</summary>
</member>
<member name="M:MarkdownDoc.Markdown.doubleUnderscores(MarkdownDoc.Internal.SimpleText.Text)">
<summary>
 Strong emphasis
</summary>
</member>
<member name="M:MarkdownDoc.Markdown.doubleAsterisks(MarkdownDoc.Internal.SimpleText.Text)">
<summary>
 Strong emphasis
</summary>
</member>
<member name="M:MarkdownDoc.Markdown.underscores(MarkdownDoc.Internal.SimpleText.Text)">
<summary>
 Emphasis
</summary>
</member>
<member name="M:MarkdownDoc.Markdown.asterisks(MarkdownDoc.Internal.SimpleText.Text)">
<summary>
 Emphasis
</summary>
</member>
<member name="M:MarkdownDoc.Markdown.angleBrackets(MarkdownDoc.Internal.SimpleText.Text)">
<summary>
 Can be used for inlining links.
</summary>
</member>
<member name="M:MarkdownDoc.Markdown.op_HatPlusHat(MarkdownDoc.Internal.SimpleText.Text,MarkdownDoc.Internal.SimpleText.Text)">
<summary>
 Horizontal concat with a separating space 
</summary>
</member>
<member name="M:MarkdownDoc.Markdown.testRenderText(MarkdownDoc.Internal.SimpleText.Text)">
<summary>
 Print the Text to the console.
</summary>
</member>
<member name="M:MarkdownDoc.Markdown.rawtext(System.String)">
<summary>
 TODO - should probably also have a version that does escaping...
</summary>
</member>
<member name="T:MarkdownDoc.Markdown">
<summary>
 Design issue
 Whitespace matters in Pandoc.
 How explicitly should we treat it in this library?
 Do we help the user (making the implementation complicated) or keep 
 the implementation simple relying on the user to do the right thin?
</summary>
</member>
</members>
</doc>
